import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe
from datetime import datetime, timedelta, time
import numpy as np

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---
REQUIRED_COLUMNS = ['Date', 'DayType', 'TimeIn', 'TimeOut', 'Deduction', 'OT_Formatted', 'Note']

def prepare_dataframe(df):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á DataFrame ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á 100%"""
    clean_df = pd.DataFrame()
    for col in REQUIRED_COLUMNS:
        source_series = df.get(col, pd.Series(dtype='object'))
        if col == 'Date':
            clean_df[col] = pd.to_datetime(source_series, errors='coerce')
        elif col in ['TimeIn', 'TimeOut', 'Deduction']:
            def to_time_obj(x):
                if isinstance(x, time): return x
                if pd.isna(x) or str(x).strip() in ['', 'None', 'NaT', 'nan']: return None
                try:
                    return datetime.strptime(str(x), '%H:%M').time()
                except (ValueError, TypeError):
                    return None
            clean_df[col] = source_series.apply(to_time_obj)
        else:
            clean_df[col] = pd.Series(source_series, dtype=str).fillna('')
    return clean_df

def decimal_to_hhmm(decimal_hours):
    if not isinstance(decimal_hours, (int, float)) or decimal_hours < 0: return "00:00"
    hours = int(decimal_hours)
    minutes = int(round((decimal_hours - hours) * 60))
    return f"{hours:02d}:{minutes:02d}"

def calculate_ot(row):
    try:
        time_in, time_out, day_type = row.get('TimeIn'), row.get('TimeOut'), row.get('DayType')
        if not all(isinstance(t, time) for t in [time_in, time_out]) or not day_type: return 0.0
        
        dummy_date = datetime.now().date()
        dt_in, dt_out = datetime.combine(dummy_date, time_in), datetime.combine(dummy_date, time_out)
        if dt_out <= dt_in: dt_out += timedelta(days=1)
        
        ot_hours_decimal = 0.0
        
        if day_type == 'Weekday':
            standard_start_time = datetime.combine(dummy_date, time(9, 0))
            calculation_base_time = max(dt_in, standard_start_time)
            ot_start_time = calculation_base_time + timedelta(hours=9, minutes=30)
            if dt_out > ot_start_time: ot_hours_decimal = (dt_out - ot_start_time).total_seconds() / 3600
        
        elif day_type == 'Weekend':
            total_duration = dt_out - dt_in
            breaks = timedelta(hours=0)
            
            if total_duration > timedelta(hours=4) and time_in < time(13, 0):
                breaks += timedelta(hours=1)

            if total_duration > timedelta(hours=9): 
                breaks += timedelta(minutes=30)
            
            ot_hours_decimal = (total_duration - breaks).total_seconds() / 3600
        
        deduction_time = row.get('Deduction')
        deduction_decimal = 0.0
        if isinstance(deduction_time, time):
            deduction_decimal = deduction_time.hour + deduction_time.minute / 60.0
        
        return max(0.0, ot_hours_decimal - deduction_decimal)
    except Exception: 
        return 0.0

def setup_sheet(worksheet):
    try:
        headers = worksheet.row_values(1)
    except gspread.exceptions.APIError: headers = []
    missing_columns = [col for col in REQUIRED_COLUMNS if col not in headers]
    if missing_columns:
        start_col_index = len(headers) + 1
        cell_list = [gspread.Cell(1, start_col_index + i, value=col_name) for i, col_name in enumerate(missing_columns)]
        worksheet.update_cells(cell_list)
    return worksheet

def connect_to_gsheet(sheet_url, sheet_name):
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = Credentials.from_service_account_info(st.secrets["google_credentials"], scopes=scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(sheet_url)
        try:
            worksheet = spreadsheet.worksheet(sheet_name)
        except gspread.WorksheetNotFound:
            worksheet = spreadsheet.add_worksheet(title=sheet_name, rows="100", cols="20")
        return setup_sheet(worksheet)
    except Exception: return None

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit ---
st.set_page_config(layout="wide")
st.title("üöÄ OT Calculator | ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏ó‡∏µ")

if 'df' not in st.session_state: st.session_state.df = None
if 'worksheet' not in st.session_state: st.session_state.worksheet = None

with st.expander("üìñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
    st.subheader("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheet")
    st.write("""
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡πÇ‡∏î‡∏¢‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
        1.  ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå Google Sheet ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
        2.  ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° **"Share"** (‡πÅ‡∏ä‡∏£‡πå) ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        3.  ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "Add people and groups" ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á:
    """)
    st.code("streamlit-sheets-bot@streamlit-sheets-bot-473709.iam.gserviceaccount.com")
    st.write("""
        4.  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô **"Editor"** (‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
        5.  **‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡πä‡∏Å** ‡∏ä‡πà‡∏≠‡∏á "Notify people"
        6.  ‡∏Ñ‡∏•‡∏¥‡∏Å **"Share"**
    """)
    st.info("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏≠‡∏á Google Sheet ‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")

    st.subheader("‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OT")
    st.markdown("""
    **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (Weekday):**
    - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏≠ 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á + ‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    - **OT ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏Å‡∏≠‡∏µ‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ**
    - ‡∏û‡∏π‡∏î‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Ñ‡∏∑‡∏≠ OT ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà **`‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô + 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ`** ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
    - **‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**
        - ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô 9:00 ‡∏ô. ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô 9:00 ‡∏ô.
        - ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á 9:00 ‡∏ô. (‡∏°‡∏≤‡∏™‡∏≤‡∏¢) ‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    
    *‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:*
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô `08:50` ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô `19:45` ‚Üí ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö OT ‡∏Ñ‡∏∑‡∏≠ `09:00 + 9:30` = `18:30` ‚Üí ‡πÑ‡∏î‡πâ OT `19:45 - 18:30` = **1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ**
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô `09:30` ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô `20:15` ‚Üí ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö OT ‡∏Ñ‡∏∑‡∏≠ `09:30 + 9:30` = `19:00` ‚Üí ‡πÑ‡∏î‡πâ OT `20:15 - 19:00` = **1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ**

    **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î (Weekend):**
    - OT ‡∏à‡∏∞‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    - **‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å:**
        - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á **‡πÅ‡∏•‡∏∞** ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô 13:00 ‡∏ô. ‚Üí **‡∏´‡∏±‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á**
        - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Üí **‡∏´‡∏±‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ**

    *‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:*
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô `09:00` ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô `15:00` (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 6 ‡∏ä‡∏°.) ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ä‡∏°. ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô 13:00 ‡∏ô. ‚Üí ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å 1 ‡∏ä‡∏°. ‚Üí ‡πÑ‡∏î‡πâ OT **5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á**
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô `13:00` ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô `19:00` (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 6 ‡∏ä‡∏°.) ‚Üí **‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç**‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏≤‡∏´‡∏•‡∏±‡∏á 13:00 ‡∏ô.) ‚Üí ‡πÑ‡∏î‡πâ OT **6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á**
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô `09:00` ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô `19:30` (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 10.5 ‡∏ä‡∏°.) ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á 2 ‡∏Ç‡πâ‡∏≠ ‚Üí ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å 1 ‡∏ä‡∏°. 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡πÑ‡∏î‡πâ OT **9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á**
    """)

    # --- [NEW] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô ---
    st.subheader("‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö OT")
    st.markdown("""
    ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö OT ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏à‡∏≤‡∏Å **"‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"** ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô:
    1.  **‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:** `(‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / 30 ‡∏ß‡∏±‡∏ô / 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)`
    2.  **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ OT ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:** `‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á * 1.5` (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤)
    3.  **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ OT ‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ:** `‡∏Ñ‡πà‡∏≤ OT ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á / 60`

    *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏•‡∏á (Round Down) ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î*
    
    **‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:**
    - `‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á = ROUNDDOWN(‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / 30 / 8 * 1.5)`
    - `‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏ó‡∏µ = ROUNDDOWN(‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á / 60)`
    - `‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö OT ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î = (OT ‡∏£‡∏ß‡∏° (‡∏ä‡∏°.) * ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) + (OT ‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ) * ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏ó‡∏µ)`
    """)
    # ---------------------------------------------

with st.container(border=True):
    sheet_url = st.text_input("üîó ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
    sheet_name = st.text_input("üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï (Sheet Name)", value="timesheet")
    if st.button("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ / ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..."):
            st.session_state.worksheet = connect_to_gsheet(sheet_url, sheet_name)
            if st.session_state.worksheet:
                all_values = st.session_state.worksheet.get_all_records()
                source_df = pd.DataFrame(all_values)
                st.session_state.df = prepare_dataframe(source_df)
                st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

if st.session_state.df is not None:
    st.header("üìù ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    st.caption("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á | **‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å** ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

    df_display = st.session_state.df.copy()
    df_display['Delete'] = False
    display_columns = ['Delete'] + REQUIRED_COLUMNS
    
    edited_df = st.data_editor(
        df_display[display_columns],
        key="main_data_editor", num_rows="dynamic",
        column_config={
            "Delete": st.column_config.CheckboxColumn("‡∏•‡∏ö", default=False),
            "Date": st.column_config.DateColumn("üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", format="YYYY-MM-DD", required=True),
            "DayType": st.column_config.SelectboxColumn("‚ú® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô", options=["Weekday", "Weekend"], required=True),
            "TimeIn": st.column_config.TimeColumn("üïò ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", format="HH:mm", required=True, step=60),
            "TimeOut": st.column_config.TimeColumn("üïï ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", format="HH:mm", required=True, step=60),
            "Deduction": st.column_config.TimeColumn("‚úÇÔ∏è ‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤", format="HH:mm", step=60),
            "OT_Formatted": st.column_config.TextColumn("üí∞ OT (‡∏ä‡∏°.:‡∏ô‡∏≤‡∏ó‡∏µ)", disabled=True),
            "Note": st.column_config.TextColumn("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"),
        },
        use_container_width=True, disabled=['OT_Formatted'])

    st.markdown("---")
    
    st.header("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
    def hhmm_to_decimal(t_str):
        try:
            h, m = map(int, t_str.split(':'))
            return h + m / 60
        except: return 0
    total_ot_decimal = edited_df['OT_Formatted'].apply(hhmm_to_decimal).sum()
    total_ot_hours, total_ot_minutes = int(total_ot_decimal), int((total_ot_decimal - int(total_ot_decimal)) * 60)
    col_summary, col_salary = st.columns(2)
    with col_summary:
        st.metric(label="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á OT ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{total_ot_hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {total_ot_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ")
    with col_salary:
        salary = st.number_input("üíµ ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0, value=31000)
        if salary > 0:
            rate_per_hour = np.floor(salary / 30 / 8 * 1.5)
            rate_per_minute = np.floor(rate_per_hour / 60)
            ot_income = (total_ot_hours * rate_per_hour) + (total_ot_minutes * rate_per_minute)
            st.metric(label="‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö OT ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", value=f"‡∏ø {ot_income:,.2f}")

    st.markdown("---")
    st.header("‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("üóëÔ∏è ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", use_container_width=True):
            rows_to_delete = edited_df[edited_df['Delete'] == True].index
            df_after_delete = edited_df.drop(rows_to_delete)
            st.session_state.df = prepare_dataframe(df_after_delete)
            st.rerun()
    with col2:
        if st.button("üìÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", use_container_width=True):
            df_sorted = edited_df.sort_values(by="Date", ascending=True)
            st.session_state.df = prepare_dataframe(df_sorted)
            st.rerun()
    with col3:
    if st.button("üÆî ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OT ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", use_container_width=True):
        # 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        df_prepared = prepare_dataframe(edited_df)

        # 2. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏µ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        ot_decimal_values = df_prepared.apply(calculate_ot, axis=1)

        # 3. ‡∏ô‡∏≥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô DataFrame ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        df_to_process = edited_df.copy() # ‡πÉ‡∏ä‡πâ edited_df ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        df_to_process['OT_Formatted'] = ot_decimal_values.apply(decimal_to_hhmm)
        
        # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞ rerun
        st.session_state.df = prepare_dataframe(df_to_process)
        st.rerun()
    with col4:
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet", type="primary", use_container_width=True):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..."):
                df_to_save = edited_df.drop(columns=['Delete'])
                df_to_save = df_to_save.reindex(columns=REQUIRED_COLUMNS)
                for col in ['TimeIn', 'TimeOut', 'Deduction']:
                    df_to_save[col] = df_to_save[col].apply(lambda t: t.strftime('%H:%M') if isinstance(t, time) else "")
                df_to_save['Date'] = pd.to_datetime(df_to_save['Date']).dt.strftime('%Y-%m-%d')
                df_to_save.fillna('', inplace=True)
                st.session_state.worksheet.clear()
                set_with_dataframe(st.session_state.worksheet, df_to_save, include_index=False)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
