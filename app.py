import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe
from datetime import datetime, timedelta, time

# --- 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° 'Note' ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ---
REQUIRED_COLUMNS = ['Date', 'DayType', 'TimeIn', 'TimeOut', 'Deduction', 'OT_Formatted', 'Note']

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
def decimal_to_hhmm(decimal_hours):
    if not isinstance(decimal_hours, (int, float)) or decimal_hours < 0: return "00:00"
    hours = int(decimal_hours)
    minutes = int(round((decimal_hours - hours) * 60))
    return f"{hours:02d}:{minutes:02d}"

def calculate_ot(row):
    try:
        time_in, time_out, day_type = row.get('TimeIn'), row.get('TimeOut'), row.get('DayType')
        if not all(isinstance(t, time) for t in [time_in, time_out]) or not day_type: return 0.0
        dummy_date = datetime.now().date()
        dt_in, dt_out = datetime.combine(dummy_date, time_in), datetime.combine(dummy_date, time_out)
        if dt_out <= dt_in: dt_out += timedelta(days=1)
        total_duration = dt_out - dt_in
        ot_hours_decimal = 0.0
        if day_type == 'Weekday':
            ot_start_time = dt_in + timedelta(hours=9, minutes=30)
            if dt_out > ot_start_time: ot_hours_decimal = (dt_out - ot_start_time).total_seconds() / 3600
        elif day_type == 'Weekend':
            breaks = timedelta(hours=0)
            if total_duration > timedelta(hours=4): breaks += timedelta(hours=1)
            if total_duration > timedelta(hours=9): breaks += timedelta(minutes=30)
            ot_hours_decimal = (total_duration - breaks).total_seconds() / 3600
        deduction_time = row.get('Deduction')
        deduction_decimal = 0.0
        if isinstance(deduction_time, time):
            deduction_decimal = deduction_time.hour + deduction_time.minute / 60.0
        return max(0.0, ot_hours_decimal - deduction_decimal)
    except Exception: return 0.0

def setup_sheet(worksheet):
    try:
        headers = worksheet.row_values(1)
    except gspread.exceptions.APIError: headers = []
    missing_columns = [col for col in REQUIRED_COLUMNS if col not in headers]
    if missing_columns:
        start_col_index = len(headers) + 1
        cell_list = [gspread.Cell(1, start_col_index + i, value=col_name) for i, col_name in enumerate(missing_columns)]
        worksheet.update_cells(cell_list)
    return worksheet

def connect_to_gsheet(sheet_url, sheet_name):
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = Credentials.from_service_account_info(st.secrets["google_credentials"], scopes=scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(sheet_url)
        try:
            worksheet = spreadsheet.worksheet(sheet_name)
        except gspread.WorksheetNotFound:
            worksheet = spreadsheet.add_worksheet(title=sheet_name, rows="100", cols="20")
        return setup_sheet(worksheet)
    except Exception: return None

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit ---
st.set_page_config(layout="wide")
st.title("üöÄ OT Calculator | ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏ó‡∏µ")

if 'df' not in st.session_state: st.session_state.df = None
if 'worksheet' not in st.session_state: st.session_state.worksheet = None

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ---
with st.container(border=True):
    sheet_url = st.text_input("üîó ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
    sheet_name = st.text_input("üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï (Sheet Name)", value="timesheet")
    if st.button("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ / ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..."):
            st.session_state.worksheet = connect_to_gsheet(sheet_url, sheet_name)
            if st.session_state.worksheet:
                all_values = st.session_state.worksheet.get_all_values()
                if len(all_values) > 1:
                    headers, data_rows = all_values[0], all_values[1:]
                    source_df = pd.DataFrame(data_rows, columns=headers, dtype=str)
                else:
                    source_df = pd.DataFrame(columns=REQUIRED_COLUMNS, dtype=str)

                clean_df = pd.DataFrame()
                for col in REQUIRED_COLUMNS:
                    series = source_df.get(col, pd.Series(dtype='str')).fillna('')
                    if col == 'Date':
                        clean_df[col] = pd.to_datetime(series, errors='coerce')
                    elif col in ['TimeIn', 'TimeOut', 'Deduction']:
                        clean_df[col] = pd.to_datetime(series, format='%H:%M', errors='coerce').dt.time
                    else:
                        clean_df[col] = series
                st.session_state.df = clean_df
                st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

if st.session_state.df is not None:
    st.header("üìù ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    st.caption("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á | **‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å** ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

    # --- 2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ st.data_editor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡πÑ‡∏î‡πâ ---
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Delete' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox
    st.session_state.df['Delete'] = False
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ Delete ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    display_columns = ['Delete'] + REQUIRED_COLUMNS
    
    edited_df = st.data_editor(
        st.session_state.df[display_columns],
        key="main_data_editor",
        num_rows="dynamic",
        column_config={
            "Delete": st.column_config.CheckboxColumn("‡∏•‡∏ö", default=False),
            "Date": st.column_config.DateColumn("üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", format="YYYY-MM-DD", required=True),
            "DayType": st.column_config.SelectboxColumn("‚ú® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô", options=["Weekday", "Weekend"], required=True),
            "TimeIn": st.column_config.TimeColumn("üïò ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", format="HH:mm", required=True, step=60),
            "TimeOut": st.column_config.TimeColumn("üïï ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", format="HH:mm", required=True, step=60),
            "Deduction": st.column_config.TimeColumn("‚úÇÔ∏è ‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤", format="HH:mm", step=60),
            "OT_Formatted": st.column_config.TextColumn("üí∞ OT (‡∏ä‡∏°.:‡∏ô‡∏≤‡∏ó‡∏µ)", disabled=True),
            # --- 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Note ---
            "Note": st.column_config.TextColumn("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"),
        },
        use_container_width=True,
        disabled=['OT_Formatted'] # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå OT ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    )

    st.markdown("---")

    # --- 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏ö, ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö) ---
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("üóëÔ∏è ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", use_container_width=True):
            rows_to_delete = edited_df[edited_df['Delete'] == True].index
            st.session_state.df = st.session_state.df.drop(rows_to_delete)
            st.rerun()
    with col2:
        if st.button("üìÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", use_container_width=True):
            st.session_state.df['Date'] = pd.to_datetime(st.session_state.df['Date'])
            st.session_state.df = st.session_state.df.sort_values(by="Date", ascending=True).reset_index(drop=True)
            st.rerun()
    with col3:
        if st.button("üÆî ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OT ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", use_container_width=True):
            df_to_process = edited_df.drop(columns=['Delete']).copy()
            ot_decimal_values = df_to_process.apply(calculate_ot, axis=1)
            df_to_process['OT_Formatted'] = ot_decimal_values.apply(decimal_to_hhmm)
            st.session_state.df = df_to_process
            st.rerun()
    with col4:
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet", type="primary", use_container_width=True):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..."):
                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Delete)
                df_to_save = edited_df.drop(columns=['Delete']).copy()
                df_to_save = df_to_save.reindex(columns=REQUIRED_COLUMNS)

                for col in ['TimeIn', 'TimeOut', 'Deduction']:
                    df_to_save[col] = df_to_save[col].apply(lambda t: t.strftime('%H:%M') if isinstance(t, time) else "")
                df_to_save['Date'] = pd.to_datetime(df_to_save['Date']).dt.strftime('%Y-%m-%d')
                df_to_save.fillna('', inplace=True)
                
                st.session_state.worksheet.clear()
                set_with_dataframe(st.session_state.worksheet, df_to_save, include_index=False)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
